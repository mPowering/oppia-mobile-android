
plugins {
    id "org.sonarqube" version "2.6.1"
}

apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: "org.sonarqube"

repositories {
    maven { url "https://mint.splunk.com/gradle/" }
}

android {
    compileSdkVersion 26
    buildToolsVersion "25.0.3"

    defaultConfig {
        applicationId "org.opendeliver.oppia"
        versionCode 66
        versionName "6.6.0"
        minSdkVersion 14
        targetSdkVersion 26
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    //Add the version_name value to strings resources
    applicationVariants.all { variant ->
        variant.resValue "string", "version_name", variant.versionName
    }


    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'README.md'
    }

    lintOptions {
        checkReleaseBuilds true
        // Disable checks for String translations
        disable 'MissingTranslation', 'ExtraTranslation'
    }


    def Properties runtimeProps = new Properties()
    runtimeProps.load(new FileInputStream(rootProject.file('oppia-default.properties')))

    def oppiaPropsFile = rootProject.file('custom.properties')
    if (oppiaPropsFile.canRead()) {
        logger.info('Fetching properties from external file')
        runtimeProps.load(new FileInputStream(oppiaPropsFile))
    } else {
        logger.error('No properties file found. Using default values.')
    }

    buildTypes {

        all {
            //Define all the constant values that depend on the config properties
            buildConfigField "String", "MINT_API_KEY", "\"" + runtimeProps['MINT_API_KEY'] + "\""
            buildConfigField "boolean", "ADMIN_PROTECT_SETTINGS", runtimeProps['ADMIN_PROTECT_SETTINGS']
            buildConfigField "boolean", "ADMIN_PROTECT_ACTIVITY_SYNC", runtimeProps['ADMIN_PROTECT_ACTIVITY_SYNC']
            buildConfigField "boolean", "ADMIN_PROTECT_ACTIVITY_EXPORT", runtimeProps['ADMIN_PROTECT_ACTIVITY_EXPORT']
            buildConfigField "boolean", "ADMIN_PROTECT_COURSE_DELETE", runtimeProps['ADMIN_PROTECT_COURSE_DELETE']
            buildConfigField "boolean", "ADMIN_PROTECT_COURSE_RESET", runtimeProps['ADMIN_PROTECT_COURSE_RESET']
            buildConfigField "boolean", "ADMIN_PROTECT_COURSE_INSTALL", runtimeProps['ADMIN_PROTECT_COURSE_INSTALL']
            buildConfigField "boolean", "ADMIN_PROTECT_COURSE_UPDATE", runtimeProps['ADMIN_PROTECT_COURSE_UPDATE']

            buildConfigField "boolean", "MENU_ALLOW_LOGOUT", runtimeProps['MENU_ALLOW_LOGOUT']
            buildConfigField "boolean", "MENU_ALLOW_MONITOR", runtimeProps['MENU_ALLOW_MONITOR']
            buildConfigField "boolean", "MENU_ALLOW_SETTINGS", runtimeProps['MENU_ALLOW_SETTINGS']
            buildConfigField "boolean", "MENU_ALLOW_LANGUAGE", runtimeProps['MENU_ALLOW_LANGUAGE']
            buildConfigField "boolean", "MENU_ALLOW_SYNC", runtimeProps['MENU_ALLOW_SYNC']
            buildConfigField "boolean", "MENU_ALLOW_COURSE_DOWNLOAD", runtimeProps['MENU_ALLOW_COURSE_DOWNLOAD']
            buildConfigField "boolean", "DEVICEADMIN_ENABLED", runtimeProps['DEVICEADMIN_ENABLED']
            buildConfigField "boolean", "SESSION_EXPIRATION_ENABLED", runtimeProps['SESSION_EXPIRATION_ENABLED']
            buildConfigField "int", "SESSION_EXPIRATION_TIMEOUT", runtimeProps['SESSION_EXPIRATION_TIMEOUT']
            buildConfigField "int", "DOWNLOAD_COURSES_DISPLAY", runtimeProps['DOWNLOAD_COURSES_DISPLAY']
            buildConfigField "String", "GAMIFICATION_MEDIA_CRITERIA", "\"" + runtimeProps['GAMIFICATION_MEDIA_CRITERIA'] + "\""
            buildConfigField "int", "GAMIFICATION_DEFAULT_MEDIA_THRESHOLD", runtimeProps['GAMIFICATION_DEFAULT_MEDIA_THRESHOLD']

            resValue "string", "MENU_ALLOW_LOGOUT_DEFAULT_VALUE", runtimeProps['MENU_ALLOW_LOGOUT']
            resValue "string", "MENU_ALLOW_COURSE_DOWNLOAD_DEFAULT_VALUE", runtimeProps['MENU_ALLOW_COURSE_DOWNLOAD']
            resValue "string", "MENU_ALLOW_LANGUAGE_DEFAULT_VALUE", runtimeProps['MENU_ALLOW_LANGUAGE']
            resValue "string", "prefServerDefault", runtimeProps['OPPIA_SERVER_DEFAULT']
            resValue "string", "oppiaServerHost", runtimeProps['OPPIA_SERVER_HOST']
            resValue "string", "prefAdminPasswordDefault", runtimeProps['ADMIN_PROTECT_INITIAL_PASSWORD']

        }

        debug {
            testCoverageEnabled = true
            debuggable = true
        }


        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    productFlavors {
        normal {}

        admin {}
    }


}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'joda-time:joda-time:2.3'
    compile 'com.android.support:design:25.3.1'
    compile 'com.android.support:cardview-v7:25.3.1'
    compile "com.androidplot:androidplot-core:0.6.1"
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.squareup.okhttp3:okhttp:3.3.1'
    compile "com.splunk.mint:mint:5.0.0"
    compile 'com.google.android.gms:play-services-gcm:9.4.0'
    compile 'com.google.android:flexbox:0.2.5'
    compile 'uk.co.chrisjenx:calligraphy:2.3.0'

    //JUnit Dependencies
    compile 'com.android.support.constraint:constraint-layout:1.1.0'
    testCompile 'junit:junit:4.12'
    androidTestCompile 'com.squareup.okhttp3:mockwebserver:3.3.1'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile 'com.android.support:support-annotations:25.3.1'

    //Espresso Dependencies
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile('com.android.support.test.espresso:espresso-contrib:2.2.2') {
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
        exclude module: 'support-v13'
        exclude module: 'recyclerview-v7'
        exclude module: 'appcompat-v7'
        exclude module: 'design'
    }

    //Mockito Dependencies
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'

    //Dagger Dependencies
    apt 'com.google.dagger:dagger-compiler:2.5'
    compile 'com.google.dagger:dagger:2.5'
    provided 'javax.annotation:jsr250-api:1.0'
    compile 'org.glassfish:javax.annotation:10.0-b28'
    androidTestCompile 'com.github.fabioCollini:DaggerMock:0.6.2'
}

apply plugin: 'com.google.gms.google-services'

task grantPermissions(type: Exec, dependsOn: 'installDebug') {
    group = 'test'
    description = 'Grant permissions for testing.'

    def adb = android.getAdbExe().toString()
    if (!System.getProperty('os.name').toLowerCase().contains('windows')) {
        println "Granting permissions for a non windows os"
    } else {
        println "Granting permissions for a windows os"
    }
    commandLine "${adb} shell pm grant org.digitalcampus.mobile.learning android.permission.SET_ANIMATION_SCALE --stacktrace".split(" ")

}

afterEvaluate {
    tasks.each { task ->
        if (task.name.contentEquals('connectedAndroidTest') ||
                task.name.contentEquals('connectedDebugAndroidTest') ||
                task.name.contentEquals('assembleDebugAndroidTest') ||
                task.name.contentEquals('assembleAndroidTest')) {
            task.dependsOn grantPermissions
        }
    }
}
